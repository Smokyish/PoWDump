// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SwapExpiredEvent extends ethereum.Event {
  get params(): SwapExpiredEvent__Params {
    return new SwapExpiredEvent__Params(this);
  }
}

export class SwapExpiredEvent__Params {
  _event: SwapExpiredEvent;

  constructor(event: SwapExpiredEvent) {
    this._event = event;
  }

  get hash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class SwapInitiatedEvent extends ethereum.Event {
  get params(): SwapInitiatedEvent__Params {
    return new SwapInitiatedEvent__Params(this);
  }
}

export class SwapInitiatedEvent__Params {
  _event: SwapInitiatedEvent;

  constructor(event: SwapInitiatedEvent) {
    this._event = event;
  }

  get hash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SwapSuccessEvent extends ethereum.Event {
  get params(): SwapSuccessEvent__Params {
    return new SwapSuccessEvent__Params(this);
  }
}

export class SwapSuccessEvent__Params {
  _event: SwapSuccessEvent;

  constructor(event: SwapSuccessEvent) {
    this._event = event;
  }

  get hash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EtherSwap__swapMapResult {
  value0: Address;
  value1: BigInt;
  value2: Address;
  value3: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Address,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getInitiator(): Address {
    return this.value0;
  }

  getEndTimeStamp(): BigInt {
    return this.value1;
  }

  getRecipient(): Address {
    return this.value2;
  }

  getValue(): BigInt {
    return this.value3;
  }
}

export class EtherSwap extends ethereum.SmartContract {
  static bind(address: Address): EtherSwap {
    return new EtherSwap("EtherSwap", address);
  }

  swapMap(param0: Bytes): EtherSwap__swapMapResult {
    let result = super.call(
      "swapMap",
      "swapMap(bytes32):(address,uint64,address,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new EtherSwap__swapMapResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_swapMap(param0: Bytes): ethereum.CallResult<EtherSwap__swapMapResult> {
    let result = super.tryCall(
      "swapMap",
      "swapMap(bytes32):(address,uint64,address,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EtherSwap__swapMapResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }
}

export class SecretLockCall extends ethereum.Call {
  get inputs(): SecretLockCall__Inputs {
    return new SecretLockCall__Inputs(this);
  }

  get outputs(): SecretLockCall__Outputs {
    return new SecretLockCall__Outputs(this);
  }
}

export class SecretLockCall__Inputs {
  _call: SecretLockCall;

  constructor(call: SecretLockCall) {
    this._call = call;
  }

  get _lockTimeSec(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _hash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SecretLockCall__Outputs {
  _call: SecretLockCall;

  constructor(call: SecretLockCall) {
    this._call = call;
  }
}

export class SecretProofCall extends ethereum.Call {
  get inputs(): SecretProofCall__Inputs {
    return new SecretProofCall__Inputs(this);
  }

  get outputs(): SecretProofCall__Outputs {
    return new SecretProofCall__Outputs(this);
  }
}

export class SecretProofCall__Inputs {
  _call: SecretProofCall;

  constructor(call: SecretProofCall) {
    this._call = call;
  }

  get _proof(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SecretProofCall__Outputs {
  _call: SecretProofCall;

  constructor(call: SecretProofCall) {
    this._call = call;
  }
}

export class SwapExpiredRefundCall extends ethereum.Call {
  get inputs(): SwapExpiredRefundCall__Inputs {
    return new SwapExpiredRefundCall__Inputs(this);
  }

  get outputs(): SwapExpiredRefundCall__Outputs {
    return new SwapExpiredRefundCall__Outputs(this);
  }
}

export class SwapExpiredRefundCall__Inputs {
  _call: SwapExpiredRefundCall;

  constructor(call: SwapExpiredRefundCall) {
    this._call = call;
  }

  get _hash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SwapExpiredRefundCall__Outputs {
  _call: SwapExpiredRefundCall;

  constructor(call: SwapExpiredRefundCall) {
    this._call = call;
  }
}
